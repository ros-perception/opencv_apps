#! /usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2014, Kei Okada.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Kei Okada nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PACKAGE='face_recognition'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

methods = gen.enum([gen.const("eigen", str_t, "eigen", "eigen"),
                    gen.const("fisher", str_t, "fisher", "fisher"),
                    gen.const("LBPH", str_t, "LBPH", "LBPH")],
                   "Method to recognize faces")

#        variable  type  level  description  default  min  max
gen.add("model_method", str_t, 0, "Method to recognize faces", "eigen", edit_method=methods)
gen.add("use_saved_data", bool_t, 0, "Use saved data", True)
gen.add("save_train_data", bool_t, 0, "Save train data", True)
gen.add("data_dir", str_t, 0, "Save directory for train data", "~/.ros/opencv_apps/face_data")
gen.add("face_padding", int_t, 0, "Padding on face", 0, -30, 30)
gen.add("model_num_components", int_t, 0, "Number of components for face recognizer model", 0, 0, 100)
gen.add("model_threshold", double_t, 0, "Threshold for face recognizer model", 8000.0, 0.0, 10000.0)
gen.add("lbph_radius", int_t, 0, "Radius parameter used only for LBPH model", 1, 1, 10)
gen.add("lbph_neighbors", int_t, 0, "Neighbors parameter used only for LBPH model", 8, 1, 30)
gen.add("lbph_grid_x", int_t, 0, "grid_x parameter used only for LBPH model", 8, 1, 30)
gen.add("lbph_grid_y", int_t, 0, "grid_y parameter used only for LBPH model", 8, 1, 30)

exit(gen.generate(PACKAGE, "face_recognition", "FaceRecognition"))

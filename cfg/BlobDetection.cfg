#! /usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2014, Kei Okada.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Kei Okada nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PACKAGE = "opencv_apps"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", False)

gen.add("lowHue", double_t, 0, "lowHue", 0, 0, 179)
gen.add("highHue", double_t, 0, "highHue", 179, 0, 179)
gen.add("lowSat", double_t, 0, "lowSat", 0, 0, 255)
gen.add("highSat", double_t, 0, "highSat", 255, 0, 255)
gen.add("lowVal", double_t, 0, "lowVal", 0, 0, 255)
gen.add("highVal", double_t, 0, "highVal", 255, 0, 255)

gen.add("morphology_ex_kernel_size", int_t, 0, "morphology_ex_kernel_size", 3, 0, 100)

gen.add("minDistBetweenBlobs", int_t, 0, "minDistBetweenBlobs", 100, 0, 1000000) # if 2560*1600 = 4096000

gen.add("filterByColor", bool_t, 0, "filterByColor", True)
gen.add("blobColor", int_t, 0, "blobColor", 255, 0, 255)

gen.add("filterByArea", bool_t, 0, "filterByArea", True)
gen.add("minArea", int_t, 0, "minArea", 5000, 0, 10000000)
gen.add("maxArea", int_t, 0, "maxArea", 9000000, 0, 10000000)
# gen.add("minArea", int_t, 0, "minArea", 0, 0, 10000000)
# gen.add("maxArea", int_t, 0, "maxArea", 10000000, 0, 10000000)

gen.add("filterByCircularity", bool_t, 0, "filterByCircularity", True)
gen.add("minCircularity", double_t, 0, "minCircularity", 0, 0, 1)
gen.add("maxCircularity", double_t, 0, "maxCircularity", 1, 0, 1)

gen.add("filterByConvexity", bool_t, 0, "filterByConvexity", True)
gen.add("minConvexity", double_t, 0, "minConvexity", 0, 0, 1)
gen.add("maxConvexity", double_t, 0, "maxConvexity", 1, 0, 1)

gen.add("filterByInertia", bool_t, 0, "filterByInertia", True)
gen.add("minInertiaRatio", double_t, 0, "minInertiaRatio", 0, 0, 1)
gen.add("maxInertiaRatio", double_t, 0, "maxInertiaRatio", 1, 0, 1)


blobMsgType = gen.enum([ gen.const("Blob", str_t, "Blob", "Blob"),
                       gen.const("BlobArray", str_t, "BlobArray", "BlobArray"),
                       gen.const("BlobArrayStamped", str_t, "BlobArrayStamped", "BlobArrayStamped")],
                     "An enum to set blobMsgType")

gen.add("blobMsgType", str_t, 0, "blobMsgType edited via an enum", "Blob", edit_method=blobMsgType)

# debug_view_type_enum = gen.enum([ gen.const("Input", int_t, 0, "Input image"),
#                                   gen.const("Blur", int_t, 1, "GaussianBlur image"),
#                                   gen.const("Canny", int_t, 2, "Canny edge image"),
#                               ],
#                                 "An enum for debug view")

# gen.add("debug_image_type", int_t, 0, "Select image type for debug output", 0, 0, 2, edit_method=debug_view_type_enum)


exit(gen.generate(PACKAGE, "blob_detection", "BlobDetection"))

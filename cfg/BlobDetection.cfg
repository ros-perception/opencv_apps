#! /usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2014, Kei Okada.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Kei Okada nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PACKAGE = "opencv_apps"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", False)


gen.add("hue_lower_limit", int_t, 0, "The minimum allowed field value Hue", 0, 0, 179)
gen.add("hue_upper_limit", int_t, 0, "The maximum allowed field value Hue", 179, 0, 179)
gen.add("sat_lower_limit", int_t, 0, "The minimum allowed field value Saturation", 0, 0, 255)
gen.add("sat_upper_limit", int_t, 0, "The maximum allowed field value Saturation", 255, 0, 255)
gen.add("val_lower_limit", int_t, 0, "The minimum allowed field value Value", 0, 0, 255)
gen.add("val_upper_limit", int_t, 0, "The maximum allowed field value Value", 255, 0, 255)


morphology_ex_type = gen.enum([ gen.const("off", str_t, "off", "off"),
                       gen.const("opening", str_t, "opening", "opening"),
                       gen.const("closing", str_t, "closing", "closing")],
                     "An enum for morphological operation type")

gen.add("morphology_ex_type", str_t, 0, "morphological operation type", "off", edit_method=morphology_ex_type)
gen.add("morphology_ex_kernel_size", int_t, 0, "morphological operation kernel size", 3, 0, 100)


gen.add("filterByColor", bool_t, 0, "filterByColor", True)
gen.add("blobColor", int_t, 0, "blobColor", 255, 0, 255)

gen.add("filterByArea", bool_t, 0, "filterByArea", True)
gen.add("minArea", double_t, 0, "minArea", 5000, 0, 10000000)
gen.add("maxArea", double_t, 0, "maxArea", 9000000, 0, 10000000)

gen.add("minDistBetweenBlobs", double_t, 0, "minDistBetweenBlobs", 100, 0, 1000000) # if 2560*1600 = 4096000

gen.add("filterByCircularity", bool_t, 0, "filterByCircularity", False)
gen.add("minCircularity", double_t, 0, "minCircularity", 0, 0, 1)
gen.add("maxCircularity", double_t, 0, "maxCircularity", 1, 0, 1)

gen.add("filterByInertia", bool_t, 0, "filterByInertia", False)
gen.add("minInertiaRatio", double_t, 0, "minInertiaRatio", 0, 0, 1)
gen.add("maxInertiaRatio", double_t, 0, "maxInertiaRatio", 1, 0, 1)

gen.add("filterByConvexity", bool_t, 0, "filterByConvexity", False)
gen.add("minConvexity", double_t, 0, "minConvexity", 0, 0, 1)
gen.add("maxConvexity", double_t, 0, "maxConvexity", 1, 0, 1)


exit(gen.generate(PACKAGE, "blob_detection", "BlobDetection"))

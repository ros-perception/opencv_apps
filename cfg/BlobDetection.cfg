#! /usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2022, Hui Shi, University of Tartu.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Hui Shi, University of Tartu nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PACKAGE = "opencv_apps"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", False)

gen.add("hue_lower_limit", int_t, 0, "The minimum allowed field value Hue", 0, 0, 179)
gen.add("hue_upper_limit", int_t, 0, "The maximum allowed field value Hue", 179, 0, 179)
gen.add("sat_lower_limit", int_t, 0, "The minimum allowed field value Saturation", 0, 0, 255)
gen.add("sat_upper_limit", int_t, 0, "The maximum allowed field value Saturation", 255, 0, 255)
gen.add("val_lower_limit", int_t, 0, "The minimum allowed field value Value", 0, 0, 255)
gen.add("val_upper_limit", int_t, 0, "The maximum allowed field value Value", 255, 0, 255)

morphology_ex_type = gen.enum([ gen.const("off", str_t, "off", "no morphological operation"),
                       gen.const("opening", str_t, "opening", "morphological operation type opening (erosion followed by dilation)"),
                       gen.const("closing", str_t, "closing", "morphological operation type closing (dilation followed by erosion)")],
                     "An enum for morphological operation type")
gen.add("morphology_ex_type", str_t, 0, "morphological operation type", "off", edit_method=morphology_ex_type)
gen.add("morphology_ex_kernel_size", int_t, 0, "morphological operation kernel size (should be odd number)", 3, 0, 100)

gen.add("filter_by_color", bool_t, 0, "filter by color, use True/False to turn on/off the filtration", True)
gen.add("blob_color", int_t, 0, "Use blob_color = 0 to extract dark blobs and blob_color = 255 to extract light blobs.", 255, 0, 255)
gen.add("filter_by_area", bool_t, 0, "filter by area, use True/False to turn on/off the filtration", True)
gen.add("min_area", double_t, 0, "Extracted blobs have an area between minArea (inclusive) and maxArea (exclusive).", 0, 0, 300000)
gen.add("max_area", double_t, 0, "Extracted blobs have an area between minArea (inclusive) and maxArea (exclusive).", 300000, 0, 300000)
gen.add("min_dist_between_blobs", double_t, 0, "The blobs located closer than minDistBetweenBlobs are merged.", 0, 0, 800)
gen.add("filter_by_circularity", bool_t, 0, "filter by circularity, use True/False to turn on/off the filtration", False)
gen.add("min_circularity", double_t, 0, "Extracted blobs have circularity between minCircularity (inclusive) and maxCircularity (exclusive).", 0, 0, 1)
gen.add("max_circularity", double_t, 0, "Extracted blobs have circularity between minCircularity (inclusive) and maxCircularity (exclusive).", 1, 0, 1)
gen.add("filter_by_inertia", bool_t, 0, "filter by inertia, use True/False to turn on/off the filtration", False)
gen.add("min_inertia_ratio", double_t, 0, "Extracted blobs have this ratio between minInertiaRatio (inclusive) and maxInertiaRatio (exclusive).", 0, 0, 1)
gen.add("max_inertia_ratio", double_t, 0, "Extracted blobs have this ratio between minInertiaRatio (inclusive) and maxInertiaRatio (exclusive).", 1, 0, 1)
gen.add("filter_by_convexity", bool_t, 0, "filter by convexity, use True/False to turn on/off the filtration", False)
gen.add("min_convexity", double_t, 0, "Extracted blobs have convexity between minConvexity (inclusive) and maxConvexity (exclusive).", 0, 0, 1)
gen.add("max_convexity", double_t, 0, "Extracted blobs have convexity between minConvexity (inclusive) and maxConvexity (exclusive).", 1, 0, 1)

exit(gen.generate(PACKAGE, "blob_detection", "BlobDetection"))